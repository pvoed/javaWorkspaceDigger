/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SoftwareD_GUI2.java
 *
 * Created on Apr 27, 2011, 1:18:23 PM
 */

package edu.ycp.cs320.ClassExtracter.gui;

import edu.ycp.cs320.ClassExtracter.FileListStructure;
import edu.ycp.cs320.ClassExtracter.FileProperties;
import edu.ycp.cs320.ClassExtracter.MethodProperties;
import edu.ycp.cs320.ClassExtracter.ProgramReader;
import edu.ycp.cs320.ClassExtracter.SystemControl;
import java.awt.event.ActionEvent;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.List;
import java.util.ListIterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.ListModel;
import javax.swing.filechooser.FileFilter;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeModel;
import javax.swing.tree.TreePath;

/**
 *
 * @author npaulovi
 */
public class SoftwareD_GUI2 extends javax.swing.JPanel {
private FileListStructure personalFLS;
private FileProperties personalBankFile;
private SystemControl sc;
    /** Creates new form SoftwareD_GUI2 */
    public SoftwareD_GUI2() {
        initComponents();
        personalFLS = new FileListStructure();
        personalBankFile = new FileProperties();
        personalBankFile.setName("MethodsAdded");
        personalFLS.addFile(personalBankFile);
        TreeModel model = createTree(personalFLS);
        PersonalTree.setModel(model);

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        WorkTree = new javax.swing.JTree();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jList3 = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        PersonalTree = new javax.swing.JTree();
        jScrollPane4 = new javax.swing.JScrollPane();
        P_description = new javax.swing.JTextArea();

        setPreferredSize(new java.awt.Dimension(600, 400));
        setLayout(null);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 12));
        jLabel1.setText("Work List");
        add(jLabel1);
        jLabel1.setBounds(50, 0, 84, 36);

        WorkTree.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                WorkTreeFocusGained(evt);
            }
        });
        jScrollPane1.setViewportView(WorkTree);

        add(jScrollPane1);
        jScrollPane1.setBounds(20, 30, 130, 120);

        jButton1.setText("ADD");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });
        add(jButton1);
        jButton1.setBounds(170, 80, 100, 23);

        jButton2.setText("REMOVE");
        jButton2.setActionCommand("jButton2");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        add(jButton2);
        jButton2.setBounds(420, 170, 73, 22);

        jLabel2.setFont(new java.awt.Font("Arial", 1, 12));
        jLabel2.setText("Personal List");
        add(jLabel2);
        jLabel2.setBounds(350, 10, 75, 15);

        jButton3.setFont(new java.awt.Font("Tahoma", 0, 10));
        jButton3.setText("File Upload");
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton3MouseClicked(evt);
            }
        });
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        add(jButton3);
        jButton3.setBounds(50, 170, 83, 21);

        jButton4.setFont(new java.awt.Font("Tahoma", 0, 10));
        jButton4.setText("File Download");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        add(jButton4);
        jButton4.setBounds(280, 170, 97, 21);

        jList3.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "W_DESCRIPTION BOX" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane3.setViewportView(jList3);

        add(jScrollPane3);
        jScrollPane3.setBounds(20, 210, 250, 130);

        PersonalTree.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                PersonalTreeFocusGained(evt);
            }
        });
        jScrollPane2.setViewportView(PersonalTree);

        add(jScrollPane2);
        jScrollPane2.setBounds(330, 30, 122, 126);

        jScrollPane4.setToolTipText("dfdf");

        P_description.setColumns(20);
        P_description.setRows(5);
        P_description.setText("P_DESCRIPTION BOX");
        jScrollPane4.setViewportView(P_description);

        add(jScrollPane4);
        jScrollPane4.setBounds(306, 206, 230, 140);
    }// </editor-fold>//GEN-END:initComponents

    private void removeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_jButton2ActionPerformed

    private void file_uploadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_jButton3ActionPerformed

    private void file_downloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_jButton4ActionPerformed

    private void file_uploadMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseClicked
        JFileChooser javaFileChooser = new JFileChooser();
        FileFilter filter = new FileFilter() {
            @Override
            public boolean accept(File f) {
                return f.isDirectory();
            }

            @Override
            public String getDescription() {
                return "Directories";
            }
        };
        javaFileChooser.setFileFilter(filter);
        javaFileChooser.setMultiSelectionEnabled(false);
        javaFileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        int rc = javaFileChooser.showOpenDialog(this);
        if (rc == JFileChooser.APPROVE_OPTION) {
            File selected = javaFileChooser.getSelectedFile();


            //if (selected.length > 0) {
                File dir = selected;

                // TODO: do something with the directory
                String dirPath = dir.getPath();
                System.out.println(dirPath);
                FileListStructure fs = new FileListStructure();
                sc = new SystemControl();
                ProgramReader pr = new ProgramReader();
                List allJavaFiles = sc.scanDirectory(dirPath);
                ListIterator i = allJavaFiles.listIterator();
                while(i.hasNext()){
                    try {
                        pr.setFileLocation(i.next().toString());
                        try {
                            pr.readLines();
                            FileProperties fp = pr.getFP();
                            fs.addFile(fp);
                        } catch (IOException ex) {
                           //file does not read
                        }
                    } catch (FileNotFoundException ex) {
                        //file does not exist
                    }
                }
                // TODO: build the file list using contents of directory


                TreeModel model = createTree(fs);
                WorkTree.setModel(model);
     
        }


    }//GEN-LAST:event_jButton3MouseClicked

    private void addMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked

        //if its a leaf node
        personalBankFile.setMethod(null);
        //if file node
        personalFLS.addFile(null);
        TreeModel model = createTree(personalFLS);
        PersonalTree.setModel(model);
    }//GEN-LAST:event_jButton1MouseClicked

    private void removeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
        // TODO add your handling code here:
        personalFLS.removeFile(null);
        TreeModel model = createTree(personalFLS);
        PersonalTree.setModel(model);
    }//GEN-LAST:event_jButton2MouseClicked

    private void PersonalTreeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_PersonalTreeFocusGained
        // TODO add your handling code here:
          P_description.setText(PersonalTree.getLastSelectedPathComponent().toString());
      //System.out.println(PersonalTree.SELECTION_MODEL_PROPERTY);
    }//GEN-LAST:event_PersonalTreeFocusGained

    private void WorkTreeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_WorkTreeFocusGained
        // TODO add your handling code here:
          
    }//GEN-LAST:event_WorkTreeFocusGained
    private void addActionPerformed(java.awt.event.ActionEvent evt) {


        TreePath[] selectedItems = WorkTree.getSelectionPaths();

        for (TreePath path : selectedItems) {
            Object[] pathItems = path.getPath();

            Object selectedItem = pathItems[pathItems.length - 1];

            System.out.println(selectedItem.toString() + " is selected");
        }
    }


        

    public DefaultTreeModel createTree(FileListStructure f ){
        DefaultMutableTreeNode root = new DefaultMutableTreeNode("Project");
        DefaultTreeModel treeModel = new DefaultTreeModel(root);

        FileProperties[] allFileProperties = f.getFileProperties();

        //for (FileProperties fp : allFileProperties)
        for (int z = 0; z < allFileProperties.length; z++){
            FileProperties fp = allFileProperties[z];
            DefaultMutableTreeNode fileNode = new DefaultMutableTreeNode(new FilePropertiesNode(fp));
            root.add(fileNode);

          try {

                    for (int i = 0; i < fp.getMethodSize(); i++){
                    MethodProperties mp = fp.getMethod(i);
                    DefaultMutableTreeNode methodNode = new DefaultMutableTreeNode(new MethodPropertiesNode(mp));
                    fileNode.add(methodNode);

              }
          } catch (IndexOutOfBoundsException e) {
              //  break;
           }
        }
      return treeModel;
        }
    static class FilePropertiesNode extends DefaultMutableTreeNode {
            FilePropertiesNode(FileProperties fp) {
                super(fp);
            }

        @Override
            public String toString() {
                FileProperties fp = getFileProperties();

                String s = fp.getName();
                // TODO: convert the FileProperties object to a string

                return s;
            }

            public FileProperties getFileProperties() {
                return (FileProperties) getUserObject();
            }
        }

        static class MethodPropertiesNode extends DefaultMutableTreeNode {
            MethodPropertiesNode(MethodProperties mp) {
                super(mp);
            }

        @Override
            public String toString() {
                MethodProperties mp = getMethodProperties();

                String s = "";
                // TODO: convert the MethodProperties object to a string
                s += mp.getMethodName();

                return s;
            }

            public MethodProperties getMethodProperties() {
                return (MethodProperties) getUserObject();
            }
        }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea P_description;
    private javax.swing.JTree PersonalTree;
    private javax.swing.JTree WorkTree;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JList jList3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    // End of variables declaration//GEN-END:variables

}
