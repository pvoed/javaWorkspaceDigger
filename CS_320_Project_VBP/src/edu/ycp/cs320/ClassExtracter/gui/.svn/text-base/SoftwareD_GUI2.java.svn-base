/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SoftwareD_GUI2.java
 *
 * Created on Apr 27, 2011, 1:18:23 PM
 */

package edu.ycp.cs320.ClassExtracter.gui;

import edu.ycp.cs320.ClassExtracter.FileListStructure;
import edu.ycp.cs320.ClassExtracter.FileProperties;
import edu.ycp.cs320.ClassExtracter.MethodProperties;
import edu.ycp.cs320.ClassExtracter.ProgramReader;
import edu.ycp.cs320.ClassExtracter.SystemControl;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.List;
import java.util.ListIterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.filechooser.FileFilter;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeModel;
import javax.swing.tree.TreePath;

/**
 *
 * @author npaulovi
 */
public class SoftwareD_GUI2 extends javax.swing.JPanel implements TreeSelectionListener {
	private FileListStructure personalFLS,workFLS;
	private FileProperties personalBankFile;
	private SystemControl sc;
	private String CurrentSelection;
	private JFileChooser javaFileChooser;
	private FileFilter filter;

	/** Creates new form SoftwareD_GUI2 */
	public SoftwareD_GUI2() {
		initComponents();
		javaFileChooser = new JFileChooser();
		filter = new FileFilter() {
			@Override
			public boolean accept(File f) {
				return f.isDirectory();
			}

			@Override
			public String getDescription() {
				return "Directories";
			}
		};
		javaFileChooser.setFileFilter(filter);
		javaFileChooser.setMultiSelectionEnabled(false);
		javaFileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
		personalFLS = new FileListStructure();
		workFLS= new FileListStructure();
		personalBankFile = new FileProperties();
		CurrentSelection = "";


		personalBankFile.setName("MethodsAdded");
		personalFLS.addFile(personalBankFile);
		TreeModel model = createTree(personalFLS);

		PersonalList.setModel(model);
		model = createTree(workFLS);

		WorkList.setModel(model);

		PersonalList.addTreeSelectionListener(this);

	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		jDialog1 = new javax.swing.JDialog();
		jButton5 = new javax.swing.JButton();
		jButton6 = new javax.swing.JButton();
		jTextField1 = new javax.swing.JTextField();
		jLabel3 = new javax.swing.JLabel();
		jLabel1 = new javax.swing.JLabel();
		jScrollPane1 = new javax.swing.JScrollPane();
		WorkList = new javax.swing.JTree();
		jButton1 = new javax.swing.JButton();
		jButton2 = new javax.swing.JButton();
		jLabel2 = new javax.swing.JLabel();
		jButton3 = new javax.swing.JButton();
		jButton4 = new javax.swing.JButton();
		jScrollPane2 = new javax.swing.JScrollPane();
		PersonalList = new javax.swing.JTree();
		jScrollPane3 = new javax.swing.JScrollPane();
		jTextArea1 = new javax.swing.JTextArea();
		jLabel4 = new javax.swing.JLabel();
		jScrollPane4 = new javax.swing.JScrollPane();
		jTextArea2 = new javax.swing.JTextArea();
		jLabel5 = new javax.swing.JLabel();

		jDialog1.setAlwaysOnTop(true);
		jDialog1.setBounds(new java.awt.Rectangle(0, 0, 300, 200));

		jButton5.setText("Cancel");
		jButton5.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButton5ActionPerformed(evt);
			}
		});
		jDialog1.getContentPane().add(jButton5, java.awt.BorderLayout.PAGE_END);

		jButton6.setText("Save");
		jButton6.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButton6ActionPerformed(evt);
			}
		});
		jDialog1.getContentPane().add(jButton6, java.awt.BorderLayout.LINE_END);
		jDialog1.getContentPane().add(jTextField1, java.awt.BorderLayout.CENTER);

		jLabel3.setText("Enter name of file to save:");
		jDialog1.getContentPane().add(jLabel3, java.awt.BorderLayout.PAGE_START);

		setPreferredSize(new java.awt.Dimension(550, 750));
		setLayout(null);

		jLabel1.setFont(new java.awt.Font("Arial", 1, 12));
		jLabel1.setText("Work List");
		add(jLabel1);
		jLabel1.setBounds(50, 0, 84, 36);

		jScrollPane1.setViewportView(WorkList);

		add(jScrollPane1);
		jScrollPane1.setBounds(20, 30, 180, 260);

		jButton1.setText("ADD");
		jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				jButton1MouseClicked(evt);
			}
		});
		jButton1.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButton1ActionPerformed(evt);
			}
		});
		add(jButton1);
		jButton1.setBounds(40, 300, 140, 23);

		jButton2.setText("REMOVE");
		jButton2.setActionCommand("jButton2");
		jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				jButton2MouseClicked(evt);
			}
		});
		jButton2.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButton2ActionPerformed(evt);
			}
		});
		add(jButton2);
		jButton2.setBounds(340, 300, 180, 22);

		jLabel2.setFont(new java.awt.Font("Arial", 1, 12));
		jLabel2.setText("Personal List");
		add(jLabel2);
		jLabel2.setBounds(420, 10, 75, 15);

		jButton3.setFont(new java.awt.Font("Tahoma", 0, 10));
		jButton3.setText("File Upload");
		jButton3.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButton3ActionPerformed(evt);
			}
		});
		add(jButton3);
		jButton3.setBounds(220, 150, 100, 21);

		jButton4.setFont(new java.awt.Font("Tahoma", 0, 10));
		jButton4.setText("File Download");
		jButton4.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				jButton4MouseClicked(evt);
			}
		});
		jButton4.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButton4ActionPerformed(evt);
			}
		});
		add(jButton4);
		jButton4.setBounds(220, 230, 97, 21);

		jScrollPane2.setViewportView(PersonalList);

		add(jScrollPane2);
		jScrollPane2.setBounds(340, 30, 180, 250);

		jTextArea1.setColumns(20);
		jTextArea1.setRows(5);
		jScrollPane3.setViewportView(jTextArea1);

		add(jScrollPane3);
		jScrollPane3.setBounds(20, 350, 510, 150);

		jLabel4.setText("Code:");
		add(jLabel4);
		jLabel4.setBounds(20, 500, 34, 14);

		jTextArea2.setColumns(20);
		jTextArea2.setRows(5);
		jScrollPane4.setViewportView(jTextArea2);

		add(jScrollPane4);
		jScrollPane4.setBounds(20, 520, 510, 140);

		jLabel5.setText("Summary:");
		add(jLabel5);
		jLabel5.setBounds(30, 330, 60, 14);
	}// </editor-fold>//GEN-END:initComponents

	private void removeActionPerformed(java.awt.event.ActionEvent evt) {                                         

	}

	private void file_uploadActionPerformed(java.awt.event.ActionEvent evt) {                                         

	}

	private void file_downloadActionPerformed(java.awt.event.ActionEvent evt) {                                         

	}

	private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         


	}
	//adding a object from the workFLS to personalFLS
	private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {                                      
		String selItemPath = WorkList.getLastSelectedPathComponent().toString();
		//is a file

		if(selItemPath.equalsIgnoreCase("project")){


		}
		else if(workFLS.ExamineFile(selItemPath)!=null){

			personalFLS.addFile(workFLS.ExamineFile(selItemPath));
			jTextArea1.setText( selItemPath+" add to Personal Project");
		}else{


			DefaultMutableTreeNode dmNode = (DefaultMutableTreeNode)WorkList.getLastSelectedPathComponent();
			MethodPropertiesNode mpNode = (MethodPropertiesNode) dmNode.getUserObject();
			MethodProperties mp = mpNode.getMethodProperties();

			personalBankFile.setMethod(mp);
			jTextArea1.setText( selItemPath+" add to MethodsAdded File");
		}






		TreeModel model = createTree(personalFLS);
		PersonalList.setModel(model);

	}

	//removing a object from personalFLS
	private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {                                      
		String selItemPath = PersonalList.getLastSelectedPathComponent().toString();
		//is a file
		if(selItemPath.equalsIgnoreCase("project")){
			//project
		}
		else if(personalFLS.ExamineFile(selItemPath)!=null && selItemPath!="MethodsAdded"){
			personalFLS.removeFile(selItemPath);
		}else{
			DefaultMutableTreeNode dmNode = (DefaultMutableTreeNode)PersonalList.getLastSelectedPathComponent();
			MethodPropertiesNode mpNode = (MethodPropertiesNode) dmNode.getUserObject();

			personalBankFile.removeMethod(mpNode.counter());

		}


		TreeModel model = createTree(personalFLS);
		PersonalList.setModel(model);
	}
	//prepares download, auto set download location(bugged jfilechooser)
	private void jButton4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton4MouseClicked






		jDialog1.setVisible(true);






	}//GEN-LAST:event_jButton4MouseClicked

	private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {                                         
		jDialog1.setVisible(false);
	}
	//saving process
	private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed

		sc.setDownloadFileName(jTextField1.getText());
		jDialog1.setVisible(false);
		//creates a new folder
                //bugg in the filechooser
                int rc = javaFileChooser.showOpenDialog(this);
		if (rc == JFileChooser.APPROVE_OPTION) {
			File selected = javaFileChooser.getSelectedFile();



			File dir = selected;
                        //System.out.println(dir.getPath());

                        File f = new File(dir.getPath() + "\\FileExtracterFiles");
                        try{
			if(f.mkdir()){
				System.out.println("Directory Created");
				sc.setDirectory(f.getPath());}
			else{
				System.out.println("Directory is not created");
				sc.setDirectory("H:\\FileExtracterFiles");
			}
                        }catch(Exception e){
			e.printStackTrace();
			sc.setDirectory("H:\\");
		}


                }



//                File f = new File("H:\\FileExtracterFiles");
//
//		try{
//			if(f.mkdir()){
//				System.out.println("Directory Created");
//				sc.setDirectory("H:\\FileExtracterFiles");}
//			else{
//				System.out.println("Directory is not created");
//				sc.setDirectory("H:\\");
//			}
//		}catch(Exception e){
//			e.printStackTrace();
//			sc.setDirectory("H:\\");
//		}




		try {
			sc.save(personalBankFile.methodCodesToString());
			FileProperties fp[]= personalFLS.getFileProperties();
			for(int i = 1; i< fp.length; i++){
				FileProperties fileToSave = fp[i];
				sc.setDownloadFileName(fileToSave.getName());
				sc.save(fileToSave.getCode());

			}
			//System.out.println(personalBankFile.methodCodesToString());
			jTextArea1.setText("Sucess! Files saved to : " + sc.getDirectory());
		} catch (IOException ex) {
			jTextArea1.setText("Failed?");
			System.out.println("Save location: "+ sc.getDirectory() + " File named: "+ sc.getDownloadFileName() );
		}




	}//GEN-LAST:event_jButton6ActionPerformed

	private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {

	}
	//uploading and setting up the workFLS & tree
	private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {

		int rc = javaFileChooser.showOpenDialog(this);
		if (rc == JFileChooser.APPROVE_OPTION) {
			File selected = javaFileChooser.getSelectedFile();



			File dir = selected;


			workFLS = new FileListStructure();
			sc = new SystemControl();
			List<String> allJavaFiles = sc.scanDirectory(dir.getPath());
			//System.out.println(dir.getPath());


			ProgramReader pr;
			for(String f: allJavaFiles){
				//System.out.println(f);
				try {
					//System.out.println("in try");
					pr = new ProgramReader();
					pr.setFileLocation(f);
					try {
						//System.out.println("in readLine try");
						pr.readLines();
						FileProperties fp = pr.getFP();
						if(fp.getName()!=null){
							workFLS.addFile(fp);
						}
					} catch (IOException ex) {
						//reader cant read
						// System.out.println("in readLine catch");
					}
				} catch (FileNotFoundException ex) {
					//file location is invalid
					// System.out.println("in catch");
				}


			}




			TreeModel model = createTree(workFLS);
			WorkList.setModel(model);
			WorkList.addTreeSelectionListener(this);
		}



	}

	private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {

	}
	//sending a FLS to convert to a displayable tree
	public DefaultTreeModel createTree(FileListStructure f ){
		int readable = 0;
		int unreadable = 0;
		DefaultMutableTreeNode root = new DefaultMutableTreeNode("Project");
		DefaultTreeModel treeModel = new DefaultTreeModel(root);

		FileProperties[] allFileProperties = f.getFileProperties();

		//for (FileProperties fp : allFileProperties)
		for (int z = 0; z < allFileProperties.length; z++){
			FileProperties fp = allFileProperties[z];
			DefaultMutableTreeNode fileNode = new DefaultMutableTreeNode(new FilePropertiesNode(fp));
			if(fileNode.toString()!="Unreadable File"){
				root.add(fileNode);

				try {

					for (int i = 0; i < fp.getMethodSize(); i++){
						MethodProperties mp = fp.getMethod(i);
						MethodPropertiesNode mpNode = new MethodPropertiesNode(mp);
						mpNode.setCounter(i);
						DefaultMutableTreeNode methodNode = new DefaultMutableTreeNode(mpNode);
						fileNode.add(methodNode);

					}
				} catch (NullPointerException e) {
					//  break;
				}
				readable++;
			}else{
				unreadable++;
			}
		}
		jTextArea1.setText("Readable files: "+readable+ " Unreadable files: "+ unreadable);
		return treeModel;
	}
	//display info for when a item is highlighted
	@Override
	public void valueChanged(TreeSelectionEvent e) {
		TreePath selItemPath = e.getPath();

		Object item = selItemPath.getLastPathComponent();



		if(item.toString().equalsIgnoreCase("project")){
			jTextArea1.setText("Root Folder");
		}
		else if(personalFLS.ExamineFile(item.toString())!=null || workFLS.ExamineFile(item.toString())!=null){
			FileProperties fp;
			if(personalFLS.ExamineFile(item.toString())!=null){
				fp = personalFLS.ExamineFile(item.toString());

			}
			else{
				fp = workFLS.ExamineFile(item.toString());
			}
			jTextArea1.setText(fp.toString());
                        jTextArea2.setText(fp.getCode());
		}else{
			DefaultMutableTreeNode dmNode = (DefaultMutableTreeNode)WorkList.getLastSelectedPathComponent();
			MethodPropertiesNode mpNode = (MethodPropertiesNode) dmNode.getUserObject();
			MethodProperties mp = mpNode.getMethodProperties();
			jTextArea1.setText(mp.toString());
			jTextArea2.setText(mp.toStringCode());

		}


	}
	static class FilePropertiesNode extends DefaultMutableTreeNode {
		FilePropertiesNode(FileProperties fp) {
			super(fp);
		}

		@Override
		public String toString() {
			FileProperties fp = getFileProperties();
			String s = "Java File";
			try{
				s = fp.getName();
			}catch(NullPointerException ex){
				s = "Unreadable File";
			}
			// TODO: convert the FileProperties object to a string

			return s;
		}
		public boolean isMethod(){

			return false;
		}

		public FileProperties getFileProperties() {
			return (FileProperties) getUserObject();
		}
	}

	static class MethodPropertiesNode extends DefaultMutableTreeNode {
		MethodPropertiesNode(MethodProperties mp) {
			super(mp);
		}
		private int count;
		@Override
		public String toString() {
			MethodProperties mp = getMethodProperties();

			String s = "";
			// TODO: convert the MethodProperties object to a string
			s= mp.getMethodName();

			return s;
		}
		public boolean isMethod(){

			return true;
		}
		public void setCounter(int num){
			count = num;
		}
		public int counter(){
			return count;
		}
		public MethodProperties getMethodProperties() {
			return (MethodProperties) getUserObject();
		}
	}



	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JTree PersonalList;
	private javax.swing.JTree WorkList;
	private javax.swing.JButton jButton1;
	private javax.swing.JButton jButton2;
	private javax.swing.JButton jButton3;
	private javax.swing.JButton jButton4;
	private javax.swing.JButton jButton5;
	private javax.swing.JButton jButton6;
	private javax.swing.JDialog jDialog1;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JLabel jLabel3;
	private javax.swing.JLabel jLabel4;
	private javax.swing.JLabel jLabel5;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JScrollPane jScrollPane2;
	private javax.swing.JScrollPane jScrollPane3;
	private javax.swing.JScrollPane jScrollPane4;
	private javax.swing.JTextArea jTextArea1;
	private javax.swing.JTextArea jTextArea2;
	private javax.swing.JTextField jTextField1;
	// End of variables declaration//GEN-END:variables

}
